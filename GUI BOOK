gui for book 

import tkinter as tk
from tkinter import scrolledtext
import google.generativeai as genai

# --- Gemini API Setup ---
API_KEY = "API KEY"
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

SYSTEM_CONTEXT = (
    "You are a friendly librarian assistant. "
    "First ask 2-3 short questions (reading mood, genre, length). "
    "Then recommend 3-5 books with: Title â€” Author â€” 1-line summary. "
    "Keep answers concise. If user gives genre, skip asking basics."
)

history = []  # Store last few turns

def chat_turn(user_text: str) -> str:
    convo = [
        f"System: {SYSTEM_CONTEXT}",
        *[f"User: {u}\nAssistant: {a}" for (u, a) in history[-5:]],
        f"User: {user_text}",
        "Assistant:"
    ]
    prompt = "\n\n".join(convo)
    resp = model.generate_content(
        prompt,
        generation_config={
            "temperature": 0.7,
            "max_output_tokens": 500,
        }
    )
    return resp.text.strip()


# --- GUI Setup ---
root = tk.Tk()
root.title("ðŸ“š Gemini Book Librarian")
root.geometry("600x700")
root.configure(bg="#f0e6d2")  # Light library tone

# Header
header = tk.Label(root, text="Welcome to the Library ðŸ“–", font=("Garamond", 22, "bold"), bg="#f0e6d2")
header.pack(pady=10)

# Chat Display
chat_display = scrolledtext.ScrolledText(root, wrap=tk.WORD, font=("Garamond", 14))
chat_display.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
chat_display.insert(tk.END, "Assistant: Hello! I'm your Gemini Librarian. Ask me for book recommendations.\n")
chat_display.config(state=tk.DISABLED)

# User Input
input_frame = tk.Frame(root, bg="#f0e6d2")
input_frame.pack(fill=tk.X, padx=10, pady=10)

user_input = tk.Entry(input_frame, font=("Garamond", 14))
user_input.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0,10))

def send_message(event=None):
    user_text = user_input.get().strip()
    if not user_text:
        return
    chat_display.config(state=tk.NORMAL)
    chat_display.insert(tk.END, f"\nYou: {user_text}\n")
    chat_display.see(tk.END)
    user_input.delete(0, tk.END)
    
    if user_text.lower() in ("exit", "quit", "bye"):
        chat_display.insert(tk.END, "Assistant: Happy reading! ðŸ‘‹\n")
        chat_display.config(state=tk.DISABLED)
        root.after(1000, root.destroy)
        return

    reply = chat_turn(user_text)
    chat_display.insert(tk.END, f"Assistant: {reply}\n")
    chat_display.see(tk.END)
    history.append((user_text, reply))
    chat_display.config(state=tk.DISABLED)

send_button = tk.Button(input_frame, text="Send", command=send_message, font=("Garamond", 14), bg="#d4c19c")
send_button.pack(side=tk.RIGHT)

user_input.bind("<Return>", send_message)

root.mainloop()
